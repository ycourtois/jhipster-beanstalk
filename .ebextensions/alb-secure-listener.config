Parameters:
  ApplicationALBIngressCidrs:
    Type: String
    Default: "88.124.186.84/32,213.190.88.94/32"

Resources:
  AWSEBV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        "Fn::GetOptionSetting":
          Namespace: "aws:elbv2:loadbalancer"
          OptionName: "ManagedSecurityGroup"

  AWSEBV2LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: AWSEBV2LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: "HTTP_301"

#  ALBSecurityGroupIngressRules:
#    Type: Custom::SgIngressRules
#    Properties:
#      ServiceToken:
#        "Fn::GetOptionSetting":
#          Namespace: "aws:elasticbeanstalk:customoption"
#          OptionName: "SGIngressRulesLambdaArn"
#      GroupId:
#        Ref: AWSEBLoadBalancerSecurityGroup
#      PermissionList:
#        - Description: 'Http access'
#          IpProtocol: tcp
#          FromPort: '80'
#          ToPort: '80'
#          CidrIpList:
#            "Fn::Split":
#              - ","
#              - { "Ref" : "ApplicationALBIngressCidrs" }
#        - Description: 'Https access'
#          IpProtocol: tcp
#          FromPort: '443'
#          ToPort: '443'
#          CidrIpList:
#            "Fn::Split":
#              - ","
#              - { "Ref" : "ApplicationALBIngressCidrs" }

option_settings:
  aws:elbv2:listener:443:
    DefaultProcess: https
    ListenerEnabled: 'true'
    Protocol: HTTPS
  aws:elasticbeanstalk:environment:process:https:
    HealthCheckPath: /management/health
    Port: 8080
    MatcherHTTPCode: 200
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /management/health
    Port: 8080
    MatcherHTTPCode: 200
